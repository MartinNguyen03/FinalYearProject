// Generated by gencpp from file uni_lace_msgs/UniLaceInfoServiceRequest.msg
// DO NOT EDIT!


#ifndef UNI_LACE_MSGS_MESSAGE_UNILACEINFOSERVICEREQUEST_H
#define UNI_LACE_MSGS_MESSAGE_UNILACEINFOSERVICEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Bool.h>

namespace uni_lace_msgs
{
template <class ContainerAllocator>
struct UniLaceInfoServiceRequest_
{
  typedef UniLaceInfoServiceRequest_<ContainerAllocator> Type;

  UniLaceInfoServiceRequest_()
    : render()  {
    }
  UniLaceInfoServiceRequest_(const ContainerAllocator& _alloc)
    : render(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Bool_<ContainerAllocator>  _render_type;
  _render_type render;





  typedef boost::shared_ptr< ::uni_lace_msgs::UniLaceInfoServiceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::uni_lace_msgs::UniLaceInfoServiceRequest_<ContainerAllocator> const> ConstPtr;

}; // struct UniLaceInfoServiceRequest_

typedef ::uni_lace_msgs::UniLaceInfoServiceRequest_<std::allocator<void> > UniLaceInfoServiceRequest;

typedef boost::shared_ptr< ::uni_lace_msgs::UniLaceInfoServiceRequest > UniLaceInfoServiceRequestPtr;
typedef boost::shared_ptr< ::uni_lace_msgs::UniLaceInfoServiceRequest const> UniLaceInfoServiceRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::uni_lace_msgs::UniLaceInfoServiceRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::uni_lace_msgs::UniLaceInfoServiceRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::uni_lace_msgs::UniLaceInfoServiceRequest_<ContainerAllocator1> & lhs, const ::uni_lace_msgs::UniLaceInfoServiceRequest_<ContainerAllocator2> & rhs)
{
  return lhs.render == rhs.render;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::uni_lace_msgs::UniLaceInfoServiceRequest_<ContainerAllocator1> & lhs, const ::uni_lace_msgs::UniLaceInfoServiceRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace uni_lace_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::uni_lace_msgs::UniLaceInfoServiceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uni_lace_msgs::UniLaceInfoServiceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uni_lace_msgs::UniLaceInfoServiceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uni_lace_msgs::UniLaceInfoServiceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uni_lace_msgs::UniLaceInfoServiceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uni_lace_msgs::UniLaceInfoServiceRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::uni_lace_msgs::UniLaceInfoServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b38f785d3e981b63eca9d66d30fbd88a";
  }

  static const char* value(const ::uni_lace_msgs::UniLaceInfoServiceRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb38f785d3e981b63ULL;
  static const uint64_t static_value2 = 0xeca9d66d30fbd88aULL;
};

template<class ContainerAllocator>
struct DataType< ::uni_lace_msgs::UniLaceInfoServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uni_lace_msgs/UniLaceInfoServiceRequest";
  }

  static const char* value(const ::uni_lace_msgs::UniLaceInfoServiceRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::uni_lace_msgs::UniLaceInfoServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#request\n"
"std_msgs/Bool render\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Bool\n"
"bool data\n"
;
  }

  static const char* value(const ::uni_lace_msgs::UniLaceInfoServiceRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::uni_lace_msgs::UniLaceInfoServiceRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.render);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UniLaceInfoServiceRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::uni_lace_msgs::UniLaceInfoServiceRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::uni_lace_msgs::UniLaceInfoServiceRequest_<ContainerAllocator>& v)
  {
    s << indent << "render: ";
    s << std::endl;
    Printer< ::std_msgs::Bool_<ContainerAllocator> >::stream(s, indent + "  ", v.render);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UNI_LACE_MSGS_MESSAGE_UNILACEINFOSERVICEREQUEST_H
