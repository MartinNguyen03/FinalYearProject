#!/usr/bin/env python3
import rospy
from std_msgs.msg import String
from sensor_msgs.msg import Image
from rosllm_msgs.msg import LLMResponse
from rosllm_srvs.srv import LLM as LLMSrv
from rosllm_srvs.srv import LLMResponse as LLMSrvResponse
from vl_chat_llm import VLChatLLM  # Import the new class


class VLChatNode:
    def __init__(self):
        rospy.init_node("vl_chat_node")

        self.model_path = rospy.get_param("~model_path", "deepseek-ai/deepseek-vl-7b-chat")
        self.llm = VLChatLLM(model_path=self.model_path)

        self.image = None

        rospy.Service("call_llm", LLMSrv, self.handle_service_request)
        rospy.Subscriber("llm_prompt", String, self.llm_prompt_callback)
        rospy.Subscriber("/camera/color/image_raw", Image, self.image_callback)  # Subscribe to RealSense image

        self.pub = rospy.Publisher("llm_response", LLMResponse, queue_size=1)

        rospy.loginfo("VLChatNode initialized, ready to receive requests.")

    def image_callback(self, msg):
        self.image = msg  # Store latest image

    def llm_prompt_callback(self, msg):
        if self.image is None:
            rospy.logwarn("No image received yet!")
            return

        response = self.call_llm(msg.data, self.image)
        self.pub.publish(response)

    def call_llm(self, prompt: str, image: Image) -> LLMResponse:
        try:
            response_text = self.llm(prompt, image)
            return LLMResponse(success=True, response=response_text, info="DeepSeek-VL response successful")
        except Exception as e:
            rospy.logerr(f"LLM error: {e}")
            return LLMResponse(success=False, response="", info="LLM failed")

    def handle_service_request(self, req):
        rospy.loginfo("Received LLM request.")
        if self.image is None:
            rospy.logwarn("No image received yet!")
            return LLMSrvResponse(response=LLMResponse(success=False, info="No image available."))

        response = self.call_llm(req.prompt, self.image)
        return LLMSrvResponse(response=response)

    def spin(self):
        rospy.spin()


if __name__ == "__main__":
    VLChatNode().spin()
